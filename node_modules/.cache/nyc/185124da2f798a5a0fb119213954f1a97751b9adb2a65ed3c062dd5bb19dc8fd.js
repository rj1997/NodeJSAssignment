var cov_2au2sxc1dh=function(){var path="/media/rj1997/B0A2ADC1A2AD8D02/Internship Assignment/assignmentV2/mochatests/testcases.js";var hash="05bfe18178b2dcb7df49e5e4a819cf5fc4724866";var Function=function(){}.constructor;var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/media/rj1997/B0A2ADC1A2AD8D02/Internship Assignment/assignmentV2/mochatests/testcases.js",statementMap:{"0":{start:{line:1,column:13},end:{line:1,column:28}},"1":{start:{line:2,column:17},end:{line:2,column:37}},"2":{start:{line:3,column:15},end:{line:3,column:28}},"3":{start:{line:4,column:15},end:{line:4,column:36}},"4":{start:{line:6,column:10},end:{line:6,column:44}},"5":{start:{line:7,column:0},end:{line:7,column:18}},"6":{start:{line:9,column:0},end:{line:210,column:2}},"7":{start:{line:38,column:2},end:{line:57,column:4}},"8":{start:{line:39,column:21},end:{line:42,column:5}},"9":{start:{line:43,column:4},end:{line:56,column:8}},"10":{start:{line:47,column:8},end:{line:55,column:9}},"11":{start:{line:48,column:10},end:{line:48,column:53}},"12":{start:{line:50,column:10},end:{line:50,column:37}},"13":{start:{line:51,column:10},end:{line:51,column:28}},"14":{start:{line:52,column:10},end:{line:52,column:40}},"15":{start:{line:53,column:10},end:{line:53,column:54}},"16":{start:{line:54,column:10},end:{line:54,column:16}},"17":{start:{line:86,column:2},end:{line:119,column:4}},"18":{start:{line:87,column:23},end:{line:97,column:5}},"19":{start:{line:98,column:23},end:{line:101,column:5}},"20":{start:{line:102,column:4},end:{line:118,column:8}},"21":{start:{line:109,column:8},end:{line:117,column:9}},"22":{start:{line:110,column:10},end:{line:110,column:57}},"23":{start:{line:112,column:10},end:{line:112,column:37}},"24":{start:{line:113,column:10},end:{line:113,column:28}},"25":{start:{line:114,column:10},end:{line:114,column:40}},"26":{start:{line:115,column:10},end:{line:115,column:44}},"27":{start:{line:116,column:10},end:{line:116,column:16}},"28":{start:{line:144,column:2},end:{line:164,column:4}},"29":{start:{line:145,column:4},end:{line:145,column:23}},"30":{start:{line:147,column:20},end:{line:149,column:5}},"31":{start:{line:150,column:4},end:{line:163,column:8}},"32":{start:{line:157,column:8},end:{line:162,column:9}},"33":{start:{line:158,column:10},end:{line:158,column:53}},"34":{start:{line:160,column:10},end:{line:160,column:37}},"35":{start:{line:161,column:10},end:{line:161,column:16}},"36":{start:{line:189,column:2},end:{line:209,column:4}},"37":{start:{line:190,column:4},end:{line:190,column:23}},"38":{start:{line:192,column:20},end:{line:194,column:5}},"39":{start:{line:195,column:4},end:{line:208,column:8}},"40":{start:{line:202,column:8},end:{line:207,column:9}},"41":{start:{line:203,column:10},end:{line:203,column:53}},"42":{start:{line:205,column:10},end:{line:205,column:37}},"43":{start:{line:206,column:10},end:{line:206,column:16}}},fnMap:{"0":{name:"(anonymous_0)",decl:{start:{line:9,column:48},end:{line:9,column:49}},loc:{start:{line:9,column:54},end:{line:210,column:1}},line:9},"1":{name:"(anonymous_1)",decl:{start:{line:38,column:68},end:{line:38,column:69}},loc:{start:{line:38,column:84},end:{line:57,column:3}},line:38},"2":{name:"(anonymous_2)",decl:{start:{line:46,column:11},end:{line:46,column:12}},loc:{start:{line:46,column:31},end:{line:56,column:7}},line:46},"3":{name:"(anonymous_3)",decl:{start:{line:86,column:52},end:{line:86,column:53}},loc:{start:{line:86,column:68},end:{line:119,column:3}},line:86},"4":{name:"(anonymous_4)",decl:{start:{line:108,column:11},end:{line:108,column:12}},loc:{start:{line:108,column:31},end:{line:118,column:7}},line:108},"5":{name:"(anonymous_5)",decl:{start:{line:144,column:81},end:{line:144,column:82}},loc:{start:{line:144,column:97},end:{line:164,column:3}},line:144},"6":{name:"(anonymous_6)",decl:{start:{line:156,column:11},end:{line:156,column:12}},loc:{start:{line:156,column:31},end:{line:163,column:7}},line:156},"7":{name:"(anonymous_7)",decl:{start:{line:189,column:82},end:{line:189,column:83}},loc:{start:{line:189,column:98},end:{line:209,column:3}},line:189},"8":{name:"(anonymous_8)",decl:{start:{line:201,column:11},end:{line:201,column:12}},loc:{start:{line:201,column:31},end:{line:208,column:7}},line:201}},branchMap:{"0":{loc:{start:{line:47,column:8},end:{line:55,column:9}},type:"if",locations:[{start:{line:47,column:8},end:{line:55,column:9}},{start:{line:47,column:8},end:{line:55,column:9}}],line:47},"1":{loc:{start:{line:109,column:8},end:{line:117,column:9}},type:"if",locations:[{start:{line:109,column:8},end:{line:117,column:9}},{start:{line:109,column:8},end:{line:117,column:9}}],line:109},"2":{loc:{start:{line:157,column:8},end:{line:162,column:9}},type:"if",locations:[{start:{line:157,column:8},end:{line:162,column:9}},{start:{line:157,column:8},end:{line:162,column:9}}],line:157},"3":{loc:{start:{line:202,column:8},end:{line:207,column:9}},type:"if",locations:[{start:{line:202,column:8},end:{line:207,column:9}},{start:{line:202,column:8},end:{line:207,column:9}}],line:202}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0,"28":0,"29":0,"30":0,"31":0,"32":0,"33":0,"34":0,"35":0,"36":0,"37":0,"38":0,"39":0,"40":0,"41":0,"42":0,"43":0},f:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const chai=(cov_2au2sxc1dh.s[0]++,require('chai'));const chaiHTTP=(cov_2au2sxc1dh.s[1]++,require('chai-http'));const should=(cov_2au2sxc1dh.s[2]++,chai.should());const logger=(cov_2au2sxc1dh.s[3]++,require('../logging'));var app=(cov_2au2sxc1dh.s[4]++,require('../routes/userroutes.js'));cov_2au2sxc1dh.s[5]++;chai.use(chaiHTTP);cov_2au2sxc1dh.s[6]++;describe('Mocha tests for all three endpoints',()=>{cov_2au2sxc1dh.f[0]++;cov_2au2sxc1dh.s[7]++;/**
   * @swagger test
   * Mocha test for login API
   * /api/v1/login:
   *   post:
   *     tags:
   *       - Login
   *     description: Returns a JWT token
   *     produces:
   *       - application/json
   *     parameters:
   *       - username: string
   *         description: username of the user
   *         in: body
   *         required: true
   *       - password: string
   *         description: password for the user
   *         in: body
   *         required: true
   *
   *     responses:
   *       200:
   *         description: Successfully created
   *       400:
   *         description: Lack of parameters in request body
   *       500:
   *         description: Failed to generate token
   */it('should return token on login of arbitary user /Post request',function(done){cov_2au2sxc1dh.f[1]++;const testUser=(cov_2au2sxc1dh.s[8]++,{username:'rj1997',password:'HakunaMatata'});cov_2au2sxc1dh.s[9]++;chai.request(app).post('/api/v1/login').send(testUser).end(function(err,res){cov_2au2sxc1dh.f[2]++;cov_2au2sxc1dh.s[10]++;if(err){cov_2au2sxc1dh.b[0][0]++;cov_2au2sxc1dh.s[11]++;logger.error('Failed to verify login test');}else{cov_2au2sxc1dh.b[0][1]++;cov_2au2sxc1dh.s[12]++;res.should.have.status(200);cov_2au2sxc1dh.s[13]++;res.should.be.json;cov_2au2sxc1dh.s[14]++;res.body.should.be.a('object');cov_2au2sxc1dh.s[15]++;res.body.should.have.property('secretToken');cov_2au2sxc1dh.s[16]++;done();}});});/**
   * @swagger test
   * Mocha test for jsonpatch
   * /api/v1/jsonpatch:
   *   post:
   *     tags:
   *       - JsonPatch
   *     description: Returns a patched json value
   *     produces:
   *       - application/json
   *     parameters:
   *       - inputJSON: json
   *         description: json object
   *         in: body
   *         required: true
   *       - patchFunction: json
   *         description: patch function, consisting of array of steps
   *         in: body
   *         required: true
   *
   *     responses:
   *       200:
   *         description: Successfully created
   *       400:
   *         description: Lack of parameters in request body
   *       500:
   *         description: Failed to generate token
   */cov_2au2sxc1dh.s[17]++;it('should return patched JSON on /Post request',function(done){cov_2au2sxc1dh.f[3]++;const testObject=(cov_2au2sxc1dh.s[18]++,{inputJSON:{'baz':'qux','foo':'bar'},patchFunction:[{'op':'replace','path':'/baz','value':'boo'},{'op':'add','path':'/hello','value':['world']},{'op':'remove','path':'/foo'}]});const resultJSON=(cov_2au2sxc1dh.s[19]++,{'baz':'boo','hello':['world']});cov_2au2sxc1dh.s[20]++;chai.request(app).post('/api/v1/jsonpatch').send(testObject).set('authorization','bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhcmJpdGFyeVVzZXIiOnsidXNlcm5hbWUiOiJyajE5OTciLCJwYXNzd29yZCI6Imhha3VuYW1hdGF0YSJ9LCJpYXQiOjE1NTA2ODQzMTUsImV4cCI6MTU1OTMyNDMxNX0.ngSwdQg1gyTfNZAHN3t_qiQhfu9mlTv1gpWziB4R-kht6eRltKECG-j8IaLz6iAij6dNRdQgKETSM4bvU7Lf6g').end(function(err,res){cov_2au2sxc1dh.f[4]++;cov_2au2sxc1dh.s[21]++;if(err){cov_2au2sxc1dh.b[1][0]++;cov_2au2sxc1dh.s[22]++;logger.error('Failed to verify jsonPatch test');}else{cov_2au2sxc1dh.b[1][1]++;cov_2au2sxc1dh.s[23]++;res.should.have.status(200);cov_2au2sxc1dh.s[24]++;res.should.be.json;cov_2au2sxc1dh.s[25]++;res.body.should.be.a('object');cov_2au2sxc1dh.s[26]++;res.body.should.be.eql(resultJSON);cov_2au2sxc1dh.s[27]++;done();}});});/**
   * @swagger test
   * Mocha test for resizing PNG image
   * /api/v1/resizeimage:
   *   post:
   *     tags:
   *       - Resizing image to 50*50 dimensions
   *     description: Returns a 50*50 image given a url of the image from the web
   *     produces:
   *       - image stream
   *     parameters:
   *       - imageURL: URL
   *         description: image URL from the web
   *         in: body
   *         required: true
   *
   *     responses:
   *       200:
   *         description: Successfully created
   *       400:
   *         description: Lack of parameters in request body
   *       500:
   *         description: Failed to generate token
   */cov_2au2sxc1dh.s[28]++;it('should return resized image of 50*50 given a url /Post request PNG Image',function(done){cov_2au2sxc1dh.f[5]++;cov_2au2sxc1dh.s[29]++;this.timeout(15000);const testURL=(cov_2au2sxc1dh.s[30]++,{imageURL:'https://purepng.com/public/uploads/large/purepng.com-mario-runningmariofictional-charactervideo-gamefranchisenintendodesigner-1701528632710brm3o.png'});cov_2au2sxc1dh.s[31]++;chai.request(app).post('/api/v1/resizeimage').send(testURL).set('authorization','bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhcmJpdGFyeVVzZXIiOnsidXNlcm5hbWUiOiJyajE5OTciLCJwYXNzd29yZCI6Imhha3VuYW1hdGF0YSJ9LCJpYXQiOjE1NTA2ODQzMTUsImV4cCI6MTU1OTMyNDMxNX0.ngSwdQg1gyTfNZAHN3t_qiQhfu9mlTv1gpWziB4R-kht6eRltKECG-j8IaLz6iAij6dNRdQgKETSM4bvU7Lf6g').end(function(err,res){cov_2au2sxc1dh.f[6]++;cov_2au2sxc1dh.s[32]++;if(err){cov_2au2sxc1dh.b[2][0]++;cov_2au2sxc1dh.s[33]++;logger.error('Failed to verify login test');}else{cov_2au2sxc1dh.b[2][1]++;cov_2au2sxc1dh.s[34]++;res.should.have.status(200);cov_2au2sxc1dh.s[35]++;done();}});});/**
   * @swagger test
   * Mocha test for resizing JPEG image
   * /api/v1/resizeimage:
   *   post:
   *     tags:
   *       - Resizing image to 50*50 dimensions
   *     description: Returns a 50*50 image given a url of the image from the web
   *     produces:
   *       - image stream
   *     parameters:
   *       - imageURL: URL
   *         description: image URL from the web
   *         in: body
   *         required: true
   *
   *     responses:
   *       200:
   *         description: Successfully created
   *       400:
   *         description: Lack of parameters in request body
   *       500:
   *         description: Failed to generate token
   */cov_2au2sxc1dh.s[36]++;it('should return resized image of 50*50 given a url /Post request JPEG Image',function(done){cov_2au2sxc1dh.f[7]++;cov_2au2sxc1dh.s[37]++;this.timeout(15000);const testURL=(cov_2au2sxc1dh.s[38]++,{imageURL:'https://www.salford.ac.uk/__data/assets/image/0008/890072/varieties/lightbox.jpg'});cov_2au2sxc1dh.s[39]++;chai.request(app).post('/api/v1/resizeimage').send(testURL).set('authorization','bearer eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhcmJpdGFyeVVzZXIiOnsidXNlcm5hbWUiOiJyajE5OTciLCJwYXNzd29yZCI6Imhha3VuYW1hdGF0YSJ9LCJpYXQiOjE1NTA2ODQzMTUsImV4cCI6MTU1OTMyNDMxNX0.ngSwdQg1gyTfNZAHN3t_qiQhfu9mlTv1gpWziB4R-kht6eRltKECG-j8IaLz6iAij6dNRdQgKETSM4bvU7Lf6g').end(function(err,res){cov_2au2sxc1dh.f[8]++;cov_2au2sxc1dh.s[40]++;if(err){cov_2au2sxc1dh.b[3][0]++;cov_2au2sxc1dh.s[41]++;logger.error('Failed to verify login test');}else{cov_2au2sxc1dh.b[3][1]++;cov_2au2sxc1dh.s[42]++;res.should.have.status(200);cov_2au2sxc1dh.s[43]++;done();}});});});